{
  "hash": "1c3a63b62d5f2ef3ddf985d947c8d06f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Learn Generalised Additive (Mixed) Models\"\nauthor: \"Dr Stefano Coretta\"\ninstitute: \"University of Edinburgh\"\ndate: \"2024/04/18\"\nformat: \n  mono-light-revealjs:\n    theme: [default, \"custom.scss\"]\n    history: false\nfilters:\n  - tachyonsextra\nexecute: \n  echo: true\n---\n\n\n\n\n## Generalised additive models\n\n::: box-tip\n* **G**enrealised **A**dditive **M**odel**s** (GAMs)\n\n* $y = f(x)$\n    * $f(x)$ = some function of $x$ (or *smooth function*)\n:::\n\n. . .\n\n::: box-tip\n\n* Extension of \"linear\" models (linear on the link function).\n\n  * Fitting both linear and non-linear effects.\n\n* Very flexible.\n\n  * Makes interpretation of results less straightforward.\n\n:::\n\n\n## Smooth terms\n\n::: box-tip\nLMs have only **parametric terms**\n\n* `f0 ~ vowel + voicing + duration`\n\n* Parametric terms fit linear effects.\n:::\n\n. . .\n\n::: box-tip\nGAMs add (non-parametric) **smooth terms** (or simply smooths, also smoothers):\n\n* `f0 ~ vowel + voicing + s(duration)`\n\n* `f(x)`: *some function of $x$*.\n\n* Smooth terms fit non-linear effects.\n:::\n\n## mgcv package\n\n```r\nlibrary(mgcv)\ngam(y ~ s(x), data)\n```\n\nThe model: $y$ as *some* function of $x$\n\n## Example: pupil size\n\n::: box-tip\n\n* **Pupillometry data** from English young and older adults (McLaughlin et al 2022, <https://doi.org/10.3758/s13423-021-01991-0>). In Arbitrary Units (AU).\n\n* **Word recognition task** (verbal stimulus + verbal response).\n\n* Words with **sparse and dense neighbourhood** density.\n:::\n\n. . .\n\n::: box-warning\n**Hypotheses**:\n\n* Recognizing words with more competitors (dense neighbourhood) should come at a greater cognitive cost (greater pupil size) relative to recognizing words with fewer competitors (sparse neighbourhood).\n\n* The cognitive demands associated with increased neighbourhood density (greater pupil size) should be greater for older adults compared with young adults.\n\n:::\n\n## Example: pupil size\n\n::: box-tip\n\n* The original study used Growth Curve Analysis (GCA).\n\n* We will apply GAMs instead.\n:::\n\n. . .\n\n::: box-warning\n* CAVEAT: We are analysing the whole time course, rather than just a subset as done in the original study.\n:::\n\n## The data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_20 <- readRDS(\"data/pdq_20.rds\") %>%\n  mutate(\n    Condition = factor(Condition, levels = c(\"Sparse\", \"Dense\")),\n    Age = factor(Age, levels = c(\"YA\", \"OA\")),\n    pupil_z = (pupil.binned - mean(pupil.binned)) / sd(pupil.binned)\n  )\npdq_20\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 88,008 × 8\n   subject trial Condition Age   timebins Soundfile        pupil.binned  pupil_z\n     <dbl> <dbl> <fct>     <fct>    <dbl> <chr>                   <dbl>    <dbl>\n 1       1     1 Sparse    YA        -500 NAMword_675_Mul…       84.5    0.00347\n 2       1     1 Sparse    YA        -480 NAMword_675_Mul…       75.8   -0.0239 \n 3       1     1 Sparse    YA        -460 NAMword_675_Mul…       65.4   -0.0570 \n 4       1     1 Sparse    YA        -440 NAMword_675_Mul…       54.3   -0.0922 \n 5       1     1 Sparse    YA        -420 NAMword_675_Mul…       35.7   -0.151  \n 6       1     1 Sparse    YA        -400 NAMword_675_Mul…       20.2   -0.200  \n 7       1     1 Sparse    YA        -380 NAMword_675_Mul…        8.72  -0.237  \n 8       1     1 Sparse    YA        -360 NAMword_675_Mul…        0.680 -0.262  \n 9       1     1 Sparse    YA        -340 NAMword_675_Mul…      -11.4   -0.300  \n10       1     1 Sparse    YA        -320 NAMword_675_Mul…      -23.3   -0.338  \n# ℹ 87,998 more rows\n```\n\n\n:::\n:::\n\n\n## The data\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](short_files/figure-revealjs/pdq-traj-1.png){width=960}\n:::\n:::\n\n\n\n## A simple GAM: pupil size along time\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mgcv)\n\npdq_gam <- gam(\n  # Outcome\n  pupil_z ~\n    # Smooth over timebins\n    s(timebins),\n  data = pdq_20\n)\n```\n:::\n\n\n## A simple GAM: model summary\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(pdq_gam)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFamily: gaussian \nLink function: identity \n\nFormula:\npupil_z ~ s(timebins)\n\nParametric coefficients:\n              Estimate Std. Error t value Pr(>|t|)\n(Intercept) -2.607e-14  3.316e-03       0        1\n\nApproximate significance of smooth terms:\n              edf Ref.df     F p-value\ns(timebins) 7.891  8.679 334.7  <2e-16\n\nR-sq.(adj) =  0.0321   Deviance explained = 3.21%\nGCV = 0.96804  Scale est. = 0.96794   n = 88008\n```\n\n\n:::\n:::\n\n\n## A simple GAM: model summary\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nParametric coefficients:\n              Estimate Std. Error t value Pr(>|t|)\n(Intercept) -2.607e-14  3.316e-03       0        1\n\nApproximate significance of smooth terms:\n              edf Ref.df     F p-value\ns(timebins) 7.891  8.679 334.7  <2e-16\n```\n\n\n:::\n:::\n\n\n\n::: box-tip\n* The **parametric term**'s coefficient is an estimate of the mean height.\n\n* The **smooth**'s EDFs (estimated degrees of freedom) indicate whether it is a straight line (EDF = 1) or not.\n:::\n\n## A simple GAM: predict pupil size\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidygam)\n\npredict_gam(pdq_gam)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 5\n   timebins  pupil_z      se lower_ci[,1] upper_ci[,1]\n      <dbl>    <dbl>   <dbl>        <dbl>        <dbl>\n 1     -500 -0.258   0.0181       -0.294      -0.223  \n 2     -116 -0.273   0.00990      -0.293      -0.254  \n 3      268 -0.226   0.00941      -0.244      -0.208  \n 4      652 -0.0196  0.00925      -0.0378     -0.00152\n 5     1036  0.224   0.00916       0.207       0.242  \n 6     1420  0.283   0.00912       0.265       0.301  \n 7     1804  0.154   0.00916       0.136       0.172  \n 8     2188  0.0386  0.00925       0.0205      0.0568 \n 9     2572  0.00188 0.00941      -0.0166      0.0203 \n10     2956 -0.0261  0.00990      -0.0455     -0.00666\n11     3340 -0.0391  0.0181       -0.0746     -0.00359\n```\n\n\n:::\n:::\n\n\n## A simple GAM: plot predicted pupil size\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_gam(pdq_gam) %>% plot(series = \"timebins\")\n```\n\n::: {.cell-output-display}\n![](short_files/figure-revealjs/pdq-gam-plot-1.png){width=960}\n:::\n:::\n\n\n## Increase `length_out` for smoother curves\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_gam(pdq_gam, length_out = 100) %>% plot(series = \"timebins\")\n```\n\n::: {.cell-output-display}\n![](short_files/figure-revealjs/pdq-gam-plot-2-1.png){width=960}\n:::\n:::\n\n\n## Number of knots `k`\n\n::: box-tip\n* The \"wiggliness\" of the resulting curve is partially constrained by the number of *knots* (`k`).\n\n* The more knots, the more wiggly the curve can be. Or the more knots the less smooth the curve can be.\n:::\n\n. . .\n\n::: box-tip\n* You can set the number of knots `k` with the argument `k` in `s()`.\n\n* `k` cannot be larger than the number of \"sampling points\" in the variable to smooth over.\n:::\n\n## Setting `k = 3`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use bam(): Big gAM\npdq_gam_2 <- bam(\n  pupil_z ~\n    s(timebins, k = 3),\n  data = pdq_20\n)\n```\n:::\n\n\n## `k = 3`: plot predictions\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_gam(pdq_gam_2, length_out = 25) %>% plot(series = \"timebins\")\n```\n\n::: {.cell-output-display}\n![](short_files/figure-revealjs/pdq-gam-2-plot-1.png){width=960}\n:::\n:::\n\n\n## `k = 20`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_gam_2 <- bam(\n  pupil_z ~\n    s(timebins, k = 20),\n  data = pdq_20\n)\n```\n:::\n\n\n## `k = 20`: plot predictions\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_gam(pdq_gam_2, length_out = 100) %>% plot(series = \"timebins\")\n```\n\n::: {.cell-output-display}\n![](short_files/figure-revealjs/pdq-gam-2-2-plot-1.png){width=960}\n:::\n:::\n\n\n\n## Comparing groups\n\n::: box-tip\n* Comparing levels from a variable (like age: young vs old) can be achieved with the **`by`-variable method**,\n\n    * i.e. by specifying the variable as the value of the `by` argument in `s()`.\n    \n* `by`-variables have to be **factors**.\n:::\n\n. . .\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_gam_3 <- bam(\n  pupil_z ~\n    Age +\n    s(timebins, by = Age),\n  data = pdq_20\n)\n```\n:::\n\n\n## Summary\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(pdq_gam_3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFamily: gaussian \nLink function: identity \n\nFormula:\npupil_z ~ Age + s(timebins, by = Age)\n\nParametric coefficients:\n             Estimate Std. Error t value Pr(>|t|)\n(Intercept)  0.029418   0.004512   6.520 7.06e-11\nAgeOA       -0.061471   0.006648  -9.246  < 2e-16\n\nApproximate significance of smooth terms:\n                    edf Ref.df     F p-value\ns(timebins):AgeYA 8.270  8.854 223.2  <2e-16\ns(timebins):AgeOA 8.109  8.787 116.9  <2e-16\n\nR-sq.(adj) =  0.0339   Deviance explained = 3.41%\nfREML = 1.2341e+05  Scale est. = 0.96613   n = 88008\n```\n\n\n:::\n:::\n\n\n## Plot predictions of groups\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_gam(pdq_gam_3, length_out = 100) %>% plot(series = \"timebins\", comparison = \"Age\")\n```\n\n::: {.cell-output-display}\n![](short_files/figure-revealjs/pdq-gam-3-plot-1.png){width=960}\n:::\n:::\n\n\n## Get difference between curves\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_gam_3_diff <- get_difference(\n  pdq_gam_3, series = \"timebins\", length_out = 100,\n  compare = list(Age = c(\"OA\", \"YA\"))\n)\npdq_gam_3_diff\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 101 × 6\n   Age   timebins      diff     se lower_ci upper_ci\n   <chr>    <dbl>     <dbl>  <dbl>    <dbl>    <dbl>\n 1 OA-YA    -500  -0.00580  0.0369  -0.0782   0.0666\n 2 OA-YA    -462. -0.00347  0.0321  -0.0663   0.0594\n 3 OA-YA    -423. -0.00120  0.0276  -0.0553   0.0529\n 4 OA-YA    -385.  0.000892 0.0239  -0.0459   0.0477\n 5 OA-YA    -346.  0.00267  0.0210  -0.0386   0.0439\n 6 OA-YA    -308   0.00396  0.0193  -0.0340   0.0419\n 7 OA-YA    -270.  0.00461  0.0187  -0.0321   0.0413\n 8 OA-YA    -231.  0.00446  0.0189  -0.0326   0.0415\n 9 OA-YA    -193.  0.00342  0.0194  -0.0347   0.0415\n10 OA-YA    -154.  0.00139  0.0200  -0.0378   0.0406\n# ℹ 91 more rows\n```\n\n\n:::\n:::\n\n\n## Plot difference between curves\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_gam_3_diff %>% plot()\n```\n\n::: {.cell-output-display}\n![](short_files/figure-revealjs/pdq-gam-3-diff-plot-1.png){width=960}\n:::\n:::\n\n\n## Random effects\n\n::: box-tip\nOnly **fixed effects** so far...\n\n* Parametric terms.\n* Smooth terms.\n:::\n\n. . .\n\n::: box-tip\n**G**eneralised **A**dditive **M**ixed **M**odels (GAMMs).\n\nTwo ways of including random effects:\n\n* Use the `\"re\"` basis function (`bs` argument in `s()`) for random intercept and slopes.\n\n* Include a **random smooth** term with the **factor smooth interaction** as basis (`bs = \"fs\"`).\n:::\n\n## Random effects with \"factor smooth interactions\"\n\n::: box-tip\n**Factor smooth interaction**:\n* Specified with `bs = \"fs\"` in `s()`.\n* A smooth is fitted at each level of a factor.\n* NOTE: it has *interaction* in the name but has nothing to do with interactions.\n\nThe random effect variable *needs to be a factor*.\n:::\n\n## Subject as factor\n\nLet's change `subject` to a factor.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_20 <- pdq_20 %>%\n  mutate(\n    subject = as.factor(subject)\n  )\npdq_20\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 88,008 × 8\n   subject trial Condition Age   timebins Soundfile        pupil.binned  pupil_z\n   <fct>   <dbl> <fct>     <fct>    <dbl> <chr>                   <dbl>    <dbl>\n 1 1           1 Sparse    YA        -500 NAMword_675_Mul…       84.5    0.00347\n 2 1           1 Sparse    YA        -480 NAMword_675_Mul…       75.8   -0.0239 \n 3 1           1 Sparse    YA        -460 NAMword_675_Mul…       65.4   -0.0570 \n 4 1           1 Sparse    YA        -440 NAMword_675_Mul…       54.3   -0.0922 \n 5 1           1 Sparse    YA        -420 NAMword_675_Mul…       35.7   -0.151  \n 6 1           1 Sparse    YA        -400 NAMword_675_Mul…       20.2   -0.200  \n 7 1           1 Sparse    YA        -380 NAMword_675_Mul…        8.72  -0.237  \n 8 1           1 Sparse    YA        -360 NAMword_675_Mul…        0.680 -0.262  \n 9 1           1 Sparse    YA        -340 NAMword_675_Mul…      -11.4   -0.300  \n10 1           1 Sparse    YA        -320 NAMword_675_Mul…      -23.3   -0.338  \n# ℹ 87,998 more rows\n```\n\n\n:::\n:::\n\n\n## Fit model with random smooths\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_gam_4 <- bam(\n  pupil_z ~\n    # Parametric term\n    Age +\n    # Smooth term\n    s(timebins, by = Age) +\n    # Factor smooth interaction by subject\n    s(timebins, subject, bs = \"fs\", m = 1),\n  data = pdq_20\n)\n```\n:::\n\n\n## Summary\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(pdq_gam_4)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFamily: gaussian \nLink function: identity \n\nFormula:\npupil_z ~ Age + s(timebins, by = Age) + s(timebins, subject, \n    bs = \"fs\", m = 1)\n\nParametric coefficients:\n            Estimate Std. Error t value Pr(>|t|)\n(Intercept)  0.02897    0.06406   0.452    0.651\nAgeOA       -0.06099    0.09061  -0.673    0.501\n\nApproximate significance of smooth terms:\n                        edf  Ref.df      F p-value\ns(timebins):AgeYA     7.274   7.733  9.943  <2e-16\ns(timebins):AgeOA     6.968   7.491  6.174  <2e-16\ns(timebins,subject) 140.129 178.000 33.486  <2e-16\n\nR-sq.(adj) =  0.0951   Deviance explained = 9.67%\nfREML = 1.2073e+05  Scale est. = 0.90486   n = 88008\n```\n\n\n:::\n:::\n\n\n## Plot pupil size by `Age`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_gam(pdq_gam_4, length_out = 100, exclude_terms = \"s(timebins,subject)\", values = c(subject = \"1\")) %>%\n  plot(series = \"timebins\", comparison = \"Age\")\n```\n\n::: {.cell-output-display}\n![](short_files/figure-revealjs/pdq-gam-4-plot-1.png){width=960}\n:::\n:::\n\n\n## Get difference by `Age`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_gam_4_diff <- tidygam::get_difference(\n  pdq_gam_4, series = \"timebins\", length_out = 100, exclude_terms = \"s(timebins,subject)\",\n  compare = list(Age = c(\"OA\", \"YA\"))\n)\n```\n:::\n\n\n## Plot difference by `Age`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_gam_4_diff %>% plot()\n```\n\n::: {.cell-output-display}\n![](short_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n\n## Factor smooth interactions by subject\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(pdq_gam_4, select = 3)\n```\n\n::: {.cell-output-display}\n![](short_files/figure-revealjs/pdq-gam-4-plot-2-1.png){width=960}\n:::\n:::\n\n\n\n## Comparing across groups (interactions)\n\n::: box-tip\nTechnically, GAMs **don't allow interactions**.\n\n* They are ADDITIVE (interactions require multiplication).\n:::\n\n. . .\n\n::: box-tip\nWe can get interaction-like comparisons by creating **factor interactions** and using them as `by`-variables. (Note that factor interactions are *not* the same thing as factor *smooth* interactions).\n:::\n\n## Factor interactions\n\n::: box-tip\n* Let's create a factor interaction between `Age` and `Condition`.\n\n* Note that the model will include **only** this factor interaction (no need for `Age` and `Condition` separately).\n\n:::\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_20 <- pdq_20 %>%\n  mutate(\n    Age_Cond = interaction(Age, Condition)\n  )\n```\n:::\n\n\n## Fit the model with `Age_Cond`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_gam_5 <- bam(\n  pupil_z ~\n    # Parametric term\n    Age_Cond +\n    # Smooth term\n    s(timebins, by = Age_Cond, k = 20) +\n    # Factor smooth interaction by subject\n    s(timebins, subject, bs = \"fs\", m = 1),\n  data = pdq_20\n)\n```\n:::\n\n\n## Model summary\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(pdq_gam_5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nFamily: gaussian \nLink function: identity \n\nFormula:\npupil_z ~ Age_Cond + s(timebins, by = Age_Cond, k = 20) + s(timebins, \n    subject, bs = \"fs\", m = 1)\n\nParametric coefficients:\n                   Estimate Std. Error t value Pr(>|t|)\n(Intercept)        0.003547   0.064262   0.055    0.956\nAge_CondOA.Sparse -0.037032   0.090907  -0.407    0.684\nAge_CondYA.Dense   0.047044   0.008803   5.344 9.12e-08\nAge_CondOA.Dense  -0.034171   0.090893  -0.376    0.707\n\nApproximate significance of smooth terms:\n                                  edf  Ref.df      F  p-value\ns(timebins):Age_CondYA.Sparse   8.711  10.672  6.237  < 2e-16\ns(timebins):Age_CondOA.Sparse   5.027   6.040  3.191 0.003875\ns(timebins):Age_CondYA.Dense    8.002   9.779  6.464  < 2e-16\ns(timebins):Age_CondOA.Dense    6.191   7.582  4.061 0.000126\ns(timebins,subject)           144.275 178.000 33.697  < 2e-16\n\nR-sq.(adj) =  0.0958   Deviance explained = 9.76%\nfREML = 1.2073e+05  Scale est. = 0.9042    n = 88008\n```\n\n\n:::\n:::\n\n\n## Plot predictions by `Age_Cond`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict_gam(pdq_gam_5, length_out = 100, exclude_terms = \"s(timebins,subject)\", values = c(subject = \"1\")) %>%\n  plot(series = \"timebins\", comparison = \"Age_Cond\")\n```\n\n::: {.cell-output-display}\n![](short_files/figure-revealjs/pdq-gam-5-plot-1.png){width=960}\n:::\n:::\n\n\n## Separate `Age_Cond`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_gam_5_pred_2 <- predict_gam(\n  pdq_gam_5, length_out = 100, exclude_terms = \"s(timebins,subject)\",\n  values = c(subject = \"1\"),\n  separate = list(Age_Cond = c(\"Age\", \"Condition\"))\n) %>%\n  # The separate arguments returns variables with default alphabetical order.\n  # Let's reorder the levels in Condition and Age.\n  mutate(\n    Condition = factor(Condition, levels = c(\"Sparse\", \"Dense\")),\n    Age = factor(Age, levels = c(\"YA\", \"OA\")),\n  )\n```\n:::\n\n\n## Plot predictions by `Condition` for each `Age` group\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_gam_5_pred_2 %>% plot(series = \"timebins\", comparison = \"Condition\") + facet_grid(~ Age)\n```\n\n::: {.cell-output-display}\n![](short_files/figure-revealjs/pdq-gam-5-pred-2-plot-1.png){width=960}\n:::\n:::\n\n\n## Get difference in `Age = YA`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_gam_5_diff <- get_difference(\n  pdq_gam_5, series = \"timebins\", length_out = 100, exclude_terms = \"s(timebins,subject)\",\n  compare = list(Age_Cond = c(\"YA.Dense\", \"YA.Sparse\"))\n)\n```\n:::\n\n\n## Plot difference in `Age = YA`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_gam_5_diff %>% plot()\n```\n\n::: {.cell-output-display}\n![](short_files/figure-revealjs/pdq-gam-5-diff-plot-1.png){width=960}\n:::\n:::\n\n\n## Get difference in `Age = OA`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_gam_5_diff_2 <- get_difference(\n  pdq_gam_5, series = \"timebins\", length_out = 100, exclude_terms = \"s(timebins,subject)\",\n  compare = list(Age_Cond = c(\"OA.Dense\", \"OA.Sparse\"))\n)\n```\n:::\n\n\n## Plot difference in `Age = OA`\n\n\n::: {.cell}\n\n```{.r .cell-code}\npdq_gam_5_diff_2 %>% plot()\n```\n\n::: {.cell-output-display}\n![](short_files/figure-revealjs/pdq-gam-5-diff-plot-2-1.png){width=960}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}