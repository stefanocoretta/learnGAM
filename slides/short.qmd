---
title: "Learn Generalised Additive (Mixed) Models"
author: "Dr Stefano Coretta"
institute: "University of Edinburgh"
date: "2023/05/18"
format: 
  mono-light-revealjs:
    theme: [default, "custom.scss"]
    history: false
filters:
  - tachyonsextra
execute: 
  echo: true
---

```{r setup, include=FALSE}
options(ggplot2.discrete.fill = RColorBrewer::brewer.pal(8, "Dark2"))
options(ggplot2.discrete.colour = RColorBrewer::brewer.pal(8, "Dark2"))
options(show.signif.stars = FALSE)

library(tidyverse)
theme_set(theme_minimal())
library(mgcv)
library(tidygam)
```

## Generalised additive models

::: box-tip
* **G**enrealised **A**dditive **M**odel**s** (GAMs)

* $y = f(x)$
    * $f(x)$ = some function of $x$ (or *smooth function*)
:::

. . .

::: box-tip

* Extension of "linear" models (linear on the link function).

  * Fitting both linear and non-linear effects.

* Very flexible.

  * Makes interpretation of results less straightforward.

:::


## Smooth terms

::: box-tip
LMs have only **parametric terms**

* `f0 ~ vowel + voicing + duration`

* Parametric terms fit linear effects.
:::

. . .

::: box-tip
GAMs add (non-parametric) **smooth terms** (or simply smooths, also smoothers):

* `f0 ~ vowel + voicing + s(duration)`

* `f(x)`: *some function of $x$*.

* Smooth terms fit non-linear effects.
:::

## mgcv package

```r
library(mgcv)
gam(y ~ s(x), data)
```

The model: $y$ as *some* function of $x$

## Example: pupil size

::: box-tip

* **Pupillometry data** from English young and older adults (McLaughlin et al 2022, <https://doi.org/10.3758/s13423-021-01991-0>). In Arbitrary Units (AU).

* **Word recognition task** (verbal stimulus + verbal response).

* Words with **sparse and dense neighbourhood** density.
:::

. . .

::: box-warning
**Hypotheses**:

* Recognizing words with more competitors (dense neighbourhood) should come at a greater cognitive cost (greater pupil size) relative to recognizing words with fewer competitors (sparse neighbourhood).

* The cognitive demands associated with increased neighbourhood density (greater pupil size) should be greater for older adults compared with young adults.

:::

## Example: pupil size

::: box-tip

* The original study used Growth Curve Analysis (GCA).

* We will apply GAMs instead.
:::

. . .

::: box-warning
* CAVEAT: We are analysing the whole time course, rather than just a subset as done in the original study.
:::

## The data

```{r pdq}
pdq_20 <- readRDS("data/pdq_20.rds") %>%
  mutate(
    Condition = factor(Condition, levels = c("Sparse", "Dense")),
    Age = factor(Age, levels = c("YA", "OA")),
    pupil_z = (pupil.binned - mean(pupil.binned)) / sd(pupil.binned)
  )

pdq_20
```

## The data

```{r pdq-traj, echo=FALSE}
ggplot(pdq_20, aes(timebins, pupil_z)) + geom_point(alpha = 0.01) + facet_grid(Condition ~ Age) + geom_vline(xintercept = 0, alpha = 0.5) +
  labs(
    x = "Time (ms)", y = "Pupil size (z-scores)",
    description = "Time 0 corresponds to stimulus onset."
  )
```


## A simple GAM: pupil size along time

```{r pdq-gam, cache=TRUE}
library(mgcv)

pdq_gam <- gam(
  # Outcome
  pupil_z ~
    # Smooth over timebins
    s(timebins),
  data = pdq_20
)
```

## A simple GAM: model summary

```{r pdq-gam-sum}
summary(pdq_gam)
```

## A simple GAM: model summary

```{r}
#| echo: false
cat(capture.output(summary(pdq_gam))[8:14], sep = "\n")
```


::: box-tip
* The **parametric term**'s coefficient is an estimate of the mean height.

* The **smooth**'s EDFs (estimated degrees of freedom) indicate whether it is a straight line (EDF = 1) or not.
:::

## A simple GAM: predict pupil size

```{r pdq-gam-pred}
library(tidygam)

predict_gam(pdq_gam)
```

## A simple GAM: plot predicted pupil size

```{r pdq-gam-plot}
predict_gam(pdq_gam) %>% plot(series = "timebins")
```

## Increase `length_out` for smoother curves

```{r pdq-gam-plot-2}
predict_gam(pdq_gam, length_out = 100) %>% plot(series = "timebins")
```

## Number of knots `k`

::: box-tip
* The "wiggliness" of the resulting curve is partially constrained by the number of *knots* (`k`).

* The more knots, the more wiggly the curve can be. Or the more knots the less smooth the curve can be.
:::

. . .

::: box-tip
* You can set the number of knots `k` with the argument `k` in `s()`.

* `k` cannot be larger than the number of "sampling points" in the variable to smooth over.
:::

## Setting `k = 3`

```{r pdq-gam-2, cache=TRUE}
# Use bam(): Big gAM
pdq_gam_2 <- bam(
  pupil_z ~
    s(timebins, k = 3),
  data = pdq_20
)
```

## `k = 3`: plot predictions

```{r pdq-gam-2-plot}
predict_gam(pdq_gam_2, length_out = 25) %>% plot(series = "timebins")
```

## `k = 20`

```{r pdq-gam-2-2, cache=TRUE}
pdq_gam_2 <- bam(
  pupil_z ~
    s(timebins, k = 20),
  data = pdq_20
)
```

## `k = 20`: plot predictions

```{r pdq-gam-2-2-plot}
predict_gam(pdq_gam_2, length_out = 100) %>% plot(series = "timebins")
```


## Comparing groups

::: box-tip
* Comparing levels from a variable (like age: young vs old) can be achieved with the **`by`-variable method**,

    * i.e. by specifying the variable as the value of the `by` argument in `s()`.
:::

. . .

```{r pdq-gam-3a, cache=TRUE}
pdq_gam_3a <- bam(
  pupil_z ~
    s(timebins, by = Age, k = 20),
  data = pdq_20
)
```

## Summary

```{r pdq-gam-3a-sum}
summary(pdq_gam_3a)
```

. . .

**But what about comparing YA and OA?**

## Compare levels

::: box-tip
To compare levels to a reference level:

* Change factor to an **ordered factor**.

* Change factor contrasts to **treatment contrasts** (`contr.treatment`).
    * The default in ordered factors is `contr.poly`, this won't work.
    
* Include the factor as a **parametric term**.

* Include a **reference smooth** and a **difference smooth** with the `by`-variable.
:::

## 

```{r pbq-ord}
pdq_20 <- pdq_20 %>%
  mutate(
    # Make the variables into an ordered factor
    Condition_o = as.ordered(Condition),
    Age_o = as.ordered(Age)
  )

# Change the contrasts to treatment
contrasts(pdq_20$Condition_o) <- "contr.treatment"
contrasts(pdq_20$Age_o) <- "contr.treatment"
```


## 

Let's start with `Age_o`.

```{r pdq-gam-3, cache=TRUE}
pdq_gam_3 <- bam(
  pupil_z ~
    # Parametric term
    Age_o +
    # Reference smooth (Age_0 == "YA")
    s(timebins, k = 20) +
    # Difference smooth ("OA" - "YA")
    s(timebins, by = Age_o, k = 20),
  data = pdq_20
)
```

## 

```{r pdq-gam-3-sum, echo=FALSE}
cat(capture.output(summary(pdq_gam_3))[9:17], sep = "\n")
```

. . .

<br>

* `Intercept`: mean height when Age == "YA".

* `Age_oOA`: height difference between "OA" and "YA".

* `s(timebins)`: EDF > 1 = trajectory is not a straight line.

* `s(timebins):Age_oOA`: EDF > 1 = trajectory of "OA" is different from "YA".

## 

```{r pdq-gam-3-plot}
predict_gam(pdq_gam_3, length_out = 100) %>% plot(series = "timebins", comparison = "Age_o")
```

## 

```{r pdq-gam-3-diff}
pdq_gam_3_diff <- get_difference(
  pdq_gam_3, series = "timebins", length_out = 100,
  compare = list(Age_o = c("OA", "YA"))
)
pdq_gam_3_diff
```

## 

```{r pdq-gam-3-diff-plot}
pdq_gam_3_diff %>% plot()
```







## Random effects



::: box-tip
Only **fixed effects** so far...

* Parametric terms.
* Smooth terms.
:::

. . .

::: box-tip
**G**eneralised **A**dditive **M**ixed **M**odels (GAMMs).

Two ways of including random effects:

* Use the `"re"` basis function (`bs` argument in `s()`) for random intercept and slopes.

* Include a **random smooth** term with the **factor smooth interaction** as basis (`bs = "fs"`).
:::

## 

::: box-tip
**Factor smooth interaction**:
* Specified with `bs = "fs"` in `s()`.
* A smooth is fitted at each level of a factor.
* NOTE: it has *interaction* in the name but has nothing to do with interactions.

The random effect variable *needs to be a factor*.
:::

## 

Let's change `subject` to a factor (no need to make it an ordered factor).

```{r pdq-fac}
pdq_20 <- pdq_20 %>%
  mutate(
    subject = as.factor(subject)
  )
pdq_20
```

## 


```{r pdq-gam-4, cache=TRUE}
pdq_gam_4 <- bam(
  pupil_z ~
    # Paramteric term
    Age_o +
    # Reference smooth
    s(timebins, k = 20) +
    # Difference smooth
    s(timebins, by = Age_o, k = 20) +
    # Factor smooth interaction by subject
    s(timebins, subject, bs = "fs", m = 1),
  data = pdq_20
)
```

## 

```{r pdq-gam-4-sum}
summary(pdq_gam_4)
```

## 

```{r pdq-gam-4-plot}
predict_gam(pdq_gam_4, length_out = 100, exclude_terms = "s(timebins,subject)") %>%
  plot(series = "timebins", comparison = "Age_o")
```

## 

```{r pdq-gam-4-plot-2}
predict_gam(pdq_gam_4, length_out = 100, values = c(Age_o = "YA")) %>% # filter only YA subjects
  filter(subject %in% c(1:10)) %>% plot(series = "timebins")
```






## Comparing across groups (interactions)



::: box-tip
Technically, GAMs **don't allow interactions**.

* They are ADDITIVE (interactions require multiplication).
:::

. . .

::: box-tip
We can get interaction-like comparisons by creating **factor interactions** and using them as `by`-variables.
:::

## 

::: box-tip
* Let's create a factor interaction between `Age` and `Condition`.

* We also need to make it into an ordered factor with treatment contrasts.

* Note that the model will include this factor interaction (no need for `Age` and `Condition`).

:::

```{r pdq-int}
pdq_20 <- pdq_20 %>%
  mutate(
    Age_Cond = as.ordered(interaction(Age, Condition))
  )

contrasts(pdq_20$Age_Cond) <- "contr.treatment"
```

## 

```{r pdq-gam-5, cache=TRUE}
pdq_gam_5 <- bam(
  pupil_z ~
    # Paramteric term
    Age_Cond +
    # Reference smooth
    s(timebins, k = 20) +
    # Difference smooth
    s(timebins, by = Age_Cond, k = 20) +
    # Factor smooth interaction by subject
    s(timebins, subject, bs = "fs", m = 1),
  data = pdq_20
)
```

## 

```{r pdq-gam-5-sum}
summary(pdq_gam_5)
```

## 


```{r pdq-gam-5-plot}
predict_gam(pdq_gam_5, length_out = 100, exclude_terms = "s(timebins,subject)") %>%
  plot(series = "timebins", comparison = "Age_Cond")
```

## 

```{r pdq-gam-5-plot-2}
pdq_gam_5_pred_2 <- predict_gam(
  pdq_gam_5, length_out = 100, exclude_terms = "s(timebins,subject)",
  separate = list(Age_Cond = c("Age", "Condition"))
) %>%
  # The separate arguments returns variables with default alphabetical order.
  # Let's reorder the levels in Condition and Age.
  mutate(
    Condition = factor(Condition, levels = c("Sparse", "Dense")),
    Age = factor(Age, levels = c("YA", "OA")),
  )
```

## 

```{r pdq-gam-5-pred-2-plot}
pdq_gam_5_pred_2 %>% plot(series = "timebins", comparison = "Condition") + facet_grid(~ Age)
```

## 


```{r pdq-gam-5-diff}
pdq_gam_5_diff <- get_difference(
  pdq_gam_5, series = "timebins", length_out = 100, exclude_terms = "s(timebins,subject)",
  compare = list(Age_Cond = c("YA.Dense", "YA.Sparse"))
)
```

## 

```{r pdq-gam-5-diff-plot}
pdq_gam_5_diff %>% plot()
```


